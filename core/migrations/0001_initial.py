# Generated by Django 2.2.14 on 2020-08-24 22:48

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import django_extensions.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Имя группы')),
                ('description', models.CharField(blank=True, max_length=150, verbose_name='Описание')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, max_length=150, populate_from='title')),
            ],
            options={
                'verbose_name': 'Группу',
                'verbose_name_plural': 'Группы',
            },
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150, verbose_name='Отображаемое имя')),
                ('logo', models.ImageField(blank=True, upload_to='logo/')),
                ('user_f', models.CharField(default='flussonic', max_length=25, verbose_name='Логин ( flussonic )')),
                ('pass_f', models.CharField(default='letmein!', max_length=25, verbose_name='Пароль ( flussonic )')),
                ('port_f', models.CharField(default='8080', max_length=10, verbose_name='Порт ( flussonic )')),
            ],
            options={
                'verbose_name': 'Настройка',
                'verbose_name_plural': 'Настройки',
            },
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Имя')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from='title')),
                ('path', models.CharField(max_length=250, null=True, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'Хранилище',
                'verbose_name_plural': 'Хранилища',
            },
        ),
        migrations.CreateModel(
            name='Cameras',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Имя')),
                ('url', models.CharField(max_length=250, verbose_name='URL')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from='title')),
                ('camera_type', models.CharField(choices=[('PU', 'Публичная'), ('PR', 'Частная'), ('OT', 'Другие')], max_length=10, verbose_name='Тип доступа')),
                ('dvr', models.CharField(blank=True, choices=[('1d', '1 день'), ('3d', '3 дня'), ('5d', '5 дней'), ('7d', '1 неделя'), ('14d', '2 недели')], max_length=10, verbose_name='Тип доступа')),
                ('groups', models.ManyToManyField(blank=True, related_name='tags', to='core.CustomGroup', verbose_name='Группы')),
                ('storage', models.ManyToManyField(blank=True, related_name='storage', to='core.Storage', verbose_name='Хранилище')),
            ],
            options={
                'verbose_name': 'Камеру',
                'verbose_name_plural': 'Камеры',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=200, verbose_name='Почта')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Внутренний IP')),
                ('dvr', models.BooleanField(default=False, verbose_name='Доступ к архиву')),
                ('update_cam', models.BooleanField(default=False, verbose_name='Редактирование камер')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('members', models.ManyToManyField(blank=True, db_table='slug', related_name='groups', to='core.CustomGroup', verbose_name='Группы')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
